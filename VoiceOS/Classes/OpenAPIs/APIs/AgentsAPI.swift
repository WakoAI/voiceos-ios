//
// AgentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AgentsAPI {

    /**
     Create Agent
     
     - parameter agentConfiguration: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createAgent(agentConfiguration: AgentConfiguration, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AgentResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createAgentWithRequestBuilder(agentConfiguration: agentConfiguration).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Agent
     - POST /agents
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: APIKeyHeader
     - parameter agentConfiguration: (body)  
     - returns: RequestBuilder<AgentResponse> 
     */
    open class func createAgentWithRequestBuilder(agentConfiguration: AgentConfiguration) -> RequestBuilder<AgentResponse> {
        let localVariablePath = "/agents"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: agentConfiguration)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AgentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Agent
     
     - parameter agentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteAgent(agentId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AgentResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteAgentWithRequestBuilder(agentId: agentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Agent
     - DELETE /agents/{agent_id}
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: APIKeyHeader
     - parameter agentId: (path)  
     - returns: RequestBuilder<AgentResponse> 
     */
    open class func deleteAgentWithRequestBuilder(agentId: String) -> RequestBuilder<AgentResponse> {
        var localVariablePath = "/agents/{agent_id}"
        let agentIdPreEscape = "\(APIHelper.mapValueToPathItem(agentId))"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{agent_id}", with: agentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AgentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Agent
     
     - parameter agentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAgent(agentId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AgentResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getAgentWithRequestBuilder(agentId: agentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Agent
     - GET /agents/{agent_id}
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: APIKeyHeader
     - parameter agentId: (path)  
     - returns: RequestBuilder<AgentResponse> 
     */
    open class func getAgentWithRequestBuilder(agentId: String) -> RequestBuilder<AgentResponse> {
        var localVariablePath = "/agents/{agent_id}"
        let agentIdPreEscape = "\(APIHelper.mapValueToPathItem(agentId))"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{agent_id}", with: agentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AgentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Agents
     
     - parameter createdAfter: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter index: (query)  (optional, default to 1)
     - parameter size: (query)  (optional, default to 100)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listAgents(createdAfter: Date? = nil, createdBefore: Date? = nil, index: Int? = nil, size: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AgentPagination?, _ error: Error?) -> Void)) -> RequestTask {
        return listAgentsWithRequestBuilder(createdAfter: createdAfter, createdBefore: createdBefore, index: index, size: size).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Agents
     - GET /agents
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: APIKeyHeader
     - parameter createdAfter: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter index: (query)  (optional, default to 1)
     - parameter size: (query)  (optional, default to 100)
     - returns: RequestBuilder<AgentPagination> 
     */
    open class func listAgentsWithRequestBuilder(createdAfter: Date? = nil, createdBefore: Date? = nil, index: Int? = nil, size: Int? = nil) -> RequestBuilder<AgentPagination> {
        let localVariablePath = "/agents"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created_after": (wrappedValue: createdAfter?.encodeToJSON(), isExplode: true),
            "created_before": (wrappedValue: createdBefore?.encodeToJSON(), isExplode: true),
            "index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AgentPagination>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Agent
     
     - parameter agentId: (path)  
     - parameter updateAgent: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateAgent(agentId: String, updateAgent: UpdateAgent, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AgentResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return updateAgentWithRequestBuilder(agentId: agentId, updateAgent: updateAgent).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Agent
     - PATCH /agents/{agent_id}
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: APIKeyHeader
     - parameter agentId: (path)  
     - parameter updateAgent: (body)  
     - returns: RequestBuilder<AgentResponse> 
     */
    open class func updateAgentWithRequestBuilder(agentId: String, updateAgent: UpdateAgent) -> RequestBuilder<AgentResponse> {
        var localVariablePath = "/agents/{agent_id}"
        let agentIdPreEscape = "\(APIHelper.mapValueToPathItem(agentId))"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{agent_id}", with: agentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateAgent)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AgentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
