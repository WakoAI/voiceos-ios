//
// CallsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CallsAPI {

    /**
     Create Call
     
     - parameter createCall: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createCall(createCall: CreateCall, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateCallResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createCallWithRequestBuilder(createCall: createCall).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Call
     - POST /calls/create
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: APIKeyHeader
     - parameter createCall: (body)  
     - returns: RequestBuilder<CreateCallResponse> 
     */
    open class func createCallWithRequestBuilder(createCall: CreateCall) -> RequestBuilder<CreateCallResponse> {
        let localVariablePath = "/calls/create"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createCall)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateCallResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Call
     
     - parameter callId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCall(callId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CallResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getCallWithRequestBuilder(callId: callId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Call
     - GET /calls/{call_id}
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: APIKeyHeader
     - parameter callId: (path)  
     - returns: RequestBuilder<CallResponse> 
     */
    open class func getCallWithRequestBuilder(callId: String) -> RequestBuilder<CallResponse> {
        var localVariablePath = "/calls/{call_id}"
        let callIdPreEscape = "\(APIHelper.mapValueToPathItem(callId))"
        let callIdPostEscape = callIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{call_id}", with: callIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CallResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Call Recording
     
     - parameter callId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRecording(callId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CallRecording?, _ error: Error?) -> Void)) -> RequestTask {
        return getRecordingWithRequestBuilder(callId: callId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Call Recording
     - GET /calls/{call_id}/recording
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: APIKeyHeader
     - parameter callId: (path)  
     - returns: RequestBuilder<CallRecording> 
     */
    open class func getRecordingWithRequestBuilder(callId: String) -> RequestBuilder<CallRecording> {
        var localVariablePath = "/calls/{call_id}/recording"
        let callIdPreEscape = "\(APIHelper.mapValueToPathItem(callId))"
        let callIdPostEscape = callIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{call_id}", with: callIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CallRecording>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Calls
     
     - parameter status: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter index: (query)  (optional, default to 1)
     - parameter size: (query)  (optional, default to 100)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listCalls(status: CallStatus? = nil, createdBefore: Date? = nil, createdAfter: Date? = nil, index: Int? = nil, size: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CallsPagination?, _ error: Error?) -> Void)) -> RequestTask {
        return listCallsWithRequestBuilder(status: status, createdBefore: createdBefore, createdAfter: createdAfter, index: index, size: size).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Calls
     - GET /calls
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: APIKeyHeader
     - parameter status: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter index: (query)  (optional, default to 1)
     - parameter size: (query)  (optional, default to 100)
     - returns: RequestBuilder<CallsPagination> 
     */
    open class func listCallsWithRequestBuilder(status: CallStatus? = nil, createdBefore: Date? = nil, createdAfter: Date? = nil, index: Int? = nil, size: Int? = nil) -> RequestBuilder<CallsPagination> {
        let localVariablePath = "/calls"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "created_before": (wrappedValue: createdBefore?.encodeToJSON(), isExplode: true),
            "created_after": (wrappedValue: createdAfter?.encodeToJSON(), isExplode: true),
            "index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CallsPagination>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
