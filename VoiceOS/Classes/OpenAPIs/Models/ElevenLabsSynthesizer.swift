//
// ElevenLabsSynthesizer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ElevenLabsSynthesizer: Codable, JSONEncodable, Hashable {

    public enum Provider: String, Codable, CaseIterable {
        case elevenlabs = "elevenlabs"
    }
    static let optimizeLatencyRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 4, exclusiveMaximum: false, multipleOf: nil)
    /** The synthesizer provider. */
    public var provider: Provider? = .elevenlabs
    /** The elevenlabs model to use */
    public var model: ElevenLabsModel?
    /** Optimize for latency */
    public var optimizeLatency: Int? = 0

    public init(provider: Provider? = .elevenlabs, model: ElevenLabsModel? = nil, optimizeLatency: Int? = 0) {
        self.provider = provider
        self.model = model
        self.optimizeLatency = optimizeLatency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case provider
        case model
        case optimizeLatency = "optimize_latency"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(optimizeLatency, forKey: .optimizeLatency)
    }
}

