//
// UpdateAgent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateAgent: Codable, JSONEncodable, Hashable {

    /** The name of the agent */
    public var name: String?
    /** The initial message of the agent */
    public var initialMessage: String?
    /** The prompt preamble of the agent */
    public var prompt: String?
    /** The language of the agent */
    public var language: AgentLanguage?
    /** The language model of the agent. */
    public var languageModel: OpenAI?
    public var voice: Voice1?
    public var transcriber: Transcriber1?
    /** The maximum call duration in seconds. If null, the call can be of any duration. The default value is 10 min. */
    public var maxDurationTime: Int? = 600
    /** The webhooks of the agent */
    public var webhooks: [Webhook]?

    public init(name: String? = nil, initialMessage: String? = nil, prompt: String? = nil, language: AgentLanguage? = nil, languageModel: OpenAI? = nil, voice: Voice1? = nil, transcriber: Transcriber1? = nil, maxDurationTime: Int? = 600, webhooks: [Webhook]? = nil) {
        self.name = name
        self.initialMessage = initialMessage
        self.prompt = prompt
        self.language = language
        self.languageModel = languageModel
        self.voice = voice
        self.transcriber = transcriber
        self.maxDurationTime = maxDurationTime
        self.webhooks = webhooks
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case initialMessage = "initial_message"
        case prompt
        case language
        case languageModel = "language_model"
        case voice
        case transcriber
        case maxDurationTime = "max_duration_time"
        case webhooks
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(initialMessage, forKey: .initialMessage)
        try container.encodeIfPresent(prompt, forKey: .prompt)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(languageModel, forKey: .languageModel)
        try container.encodeIfPresent(voice, forKey: .voice)
        try container.encodeIfPresent(transcriber, forKey: .transcriber)
        try container.encodeIfPresent(maxDurationTime, forKey: .maxDurationTime)
        try container.encodeIfPresent(webhooks, forKey: .webhooks)
    }
}

