//
// AzureSynthesizer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AzureSynthesizer: Codable, JSONEncodable, Hashable {

    public enum Provider: String, Codable, CaseIterable {
        case azure = "azure"
    }
    static let pitchRule = NumericRule<Int>(minimum: -20, exclusiveMinimum: false, maximum: 20, exclusiveMaximum: false, multipleOf: nil)
    static let rateRule = NumericRule<Int>(minimum: -50, exclusiveMinimum: false, maximum: 50, exclusiveMaximum: false, multipleOf: nil)
    /** The synthesizer provider. */
    public var provider: Provider? = .azure
    /** The azure model to use */
    public var model: AzureModel?
    /** The pitch of the voice */
    public var pitch: Int? = 0
    /** The rate of the voice */
    public var rate: Int? = 0

    public init(provider: Provider? = .azure, model: AzureModel? = nil, pitch: Int? = 0, rate: Int? = 0) {
        self.provider = provider
        self.model = model
        self.pitch = pitch
        self.rate = rate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case provider
        case model
        case pitch
        case rate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(pitch, forKey: .pitch)
        try container.encodeIfPresent(rate, forKey: .rate)
    }
}

