//
// Voice.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Voice: Codable, JSONEncodable, Hashable {

    public enum Provider: AnyCodable, Codable, JSONEncodable, CaseIterable {
        case rime = rime
    }
    /** The synthesizer provider. */
    public var provider: Provider? = .rime
    /** The azure model to use */
    public var model: AzureModel?
    /** Optimize for latency */
    public var optimizeLatency: AnyCodable?
    /** The pitch of the voice */
    public var pitch: AnyCodable?
    /** The rate of the voice */
    public var rate: AnyCodable?
    /** The speaker of the voice. */
    public var speaker: AnyCodable?
    /** Reduces the latency of response, at the cost of some possible mispronunciation of digits and abbreviations. */
    public var reduceLantency: AnyCodable?
    /** Adjusts the speed of speech. Lower is faster. Higher is slower. */
    public var speedAlpha: AnyCodable?

    public init(provider: Provider? = .rime, model: AzureModel? = nil, optimizeLatency: AnyCodable? = nil, pitch: AnyCodable? = nil, rate: AnyCodable? = nil, speaker: AnyCodable? = nil, reduceLantency: AnyCodable? = nil, speedAlpha: AnyCodable? = nil) {
        self.provider = provider
        self.model = model
        self.optimizeLatency = optimizeLatency
        self.pitch = pitch
        self.rate = rate
        self.speaker = speaker
        self.reduceLantency = reduceLantency
        self.speedAlpha = speedAlpha
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case provider
        case model
        case optimizeLatency = "optimize_latency"
        case pitch
        case rate
        case speaker
        case reduceLantency = "reduce_lantency"
        case speedAlpha = "speed_alpha"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(optimizeLatency, forKey: .optimizeLatency)
        try container.encodeIfPresent(pitch, forKey: .pitch)
        try container.encodeIfPresent(rate, forKey: .rate)
        try container.encodeIfPresent(speaker, forKey: .speaker)
        try container.encodeIfPresent(reduceLantency, forKey: .reduceLantency)
        try container.encodeIfPresent(speedAlpha, forKey: .speedAlpha)
    }
}

