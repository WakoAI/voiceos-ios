//
// OpenAI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OpenAI: Codable, JSONEncodable, Hashable {

    public enum Provider: String, Codable, CaseIterable {
        case openai = "openai"
    }
    /** The lnaguage model provider. */
    public var provider: Provider? = .openai
    /** The OpenAI Chat GPT model to use */
    public var model: ChatGPT?
    /** The list of OpenAI function calls. */
    public var functions: [OpenAIFunction]?

    public init(provider: Provider? = .openai, model: ChatGPT? = nil, functions: [OpenAIFunction]? = nil) {
        self.provider = provider
        self.model = model
        self.functions = functions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case provider
        case model
        case functions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(functions, forKey: .functions)
    }
}

